name: Build YAAP2 OnePlus_Kernel
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'kplatform'
      FEIL:
        description: "配置文件"
        required: true
        default: 'default'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'pineapple'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android14'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.1'
      KERNEL_NAME:
        description: "修改内核名称"
        required: true
        default: '-android14-11-o-g1132d864665d'
      kernelsu_variant:
        description: "选择 KSU"
        required: true
        type: choice
        options:
          - Kernel
          - KSU_Next
        default: KSU_Next
      kernelsu_version:
        description: "选择 KSU 版本"
        required: true
        type: choice
        options:
          - without ksu
          - tag
          - main
        default: main
      SUSFS_ENABLED:
        description: "添加 SUSFS"
        required: true
        type: boolean
        default: true
      VFS_patch_ENABLED:
        description: "添加vfs补丁（新钩子）？"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "ychenxuan"
          git config --global user.email "3494167979@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl lld llvm libelf-dev dwarves

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          git clone https://github.com/yaap/kernel_oneplus_sm8650.git -b fifteen kernel_platform
          rm -rf kernel_platform/android/abi_gki_protected_exports_*
          sed -i 's/ -dirty//g' kernel_platform/scripts/setlocalversion || true

      - name: KernelSU & SukiSU version
        if: ${{ github.event.inputs.kernelsu_variant == 'Official' || github.event.inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          if [[ "${{ github.event.inputs.kernelsu_version }}" == "tag" ]]; then
            echo "BRANCH=-" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.kernelsu_version }}" == "main" ]]; then
            echo "BRANCH=-s susfs-stable" >> $GITHUB_ENV
          fi
          
      - name: Add KernelSU-SukiSU
        if: ${{ github.event.inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/KernelSU/main/kernel/setup.sh" | bash -s susfs-stable
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 12505)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          #sed -i "s/DKSU_VERSION=16/DKSU_VERSION=12581/" kernel/Makefile

      - name: Apply SUSFS Patches MKSU-SKN
        if: ${{ (inputs.kernelsu_variant == 'KSU_Next') && github.event.inputs.SUSFS_ENABLED == 'true' }}
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/cabagekiller/kernel_patches.git
          cd kernel_platform

          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          echo "正在给内核打susfs补丁"
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          echo "完成"

      - name: Apply Hide Stuff Patches
        if: ${{ github.event.inputs.SUSFS_ENABLED == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform
          cp ../kernel_patches/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch || true

      - name: Add SUSFS Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          # Add KSU configuration settings

          # Add SUSFS configuration settings
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_WITH_KPROBES=n" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_COMPAT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_VFS=y" >> ./arch/arm64/configs/gki_defconfig
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/gki_defconfig
          #echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/gki_defconfig
          # Add additional tmpfs config setting
          #echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./arch/arm64/configs/gki_defconfig
          #echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./arch/arm64/configs/gki_defconfig
          #echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./arch/arm64/configs/gki_defconfig



          # Remove defconfig check
          sed -i 's/check_defconfig//' ./build.config.gki

      - name: Add make name
        run: |
          cd kernel_workspace/kernel_platform
          echo "Running sed commands..."

          #sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "./arch/arm64/configs/gki_defconfig"
          #sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "./arch/arm64/configs/gki_defconfig"
          #sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "./arch/arm64/configs/gki_defconfig"

          # Run sed commands for modifications
          sed -i 's/check_defconfig//' ./build.config.gki
          sed -i '$s|echo "\$res"|echo "\-Kim.Jongun"|' ./scripts/setlocalversion
          sed -i 's/-dirty//' ./scripts/setlocalversion


      - name: Build kernel
        if: github.event.inputs.CPU != 'sm8650'
        run: |
          cd kernel_workspace/kernel_platform
          make ARCH=arm64 CC=clang LLVM=1 LLVM_IAS=1 -j$(nproc --all) O=out gki_defconfig vendor/pineapple_GKI.config vendor/oplus/pineapple_GKI.config vendor/oplus/waffle.config # Build the kernel config
          make ARCH=arm64 CC=clang LLVM=1 LLVM_IAS=1 -j$(nproc --all) O=out # Build the kernel itself
          make ARCH=arm64 CC=clang LLVM=1 LLVM_IAS=1 -j$(nproc --all) O=out modules_install INSTALL_MOD_PATH=./Kernel_Prebuilts # Save the kernel modules to out/Kernel_Prebuilts/lib/modules
          make ARCH=arm64 CC=clang LLVM=1 LLVM_IAS=1 -j$(nproc --all) O=out install INSTALL_PATH=./Kernel_Prebuilts # Save the kernel image(s) and devicetrees to ./Kernel_Prebuilts/boot hopefully
          make ARCH=arm64 CC=clang LLVM=1 LLVM_IAS=1 -j$(nproc --all) O=out headers_install INSTALL_HDR_PATH=./Kernel_Prebuilts/usr # Save the kernel headers to out/Kernel_Prebuilts/usr

      - name: Set Timestamp
        id: timestamp
        run: echo "CURRENT_TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Prepare and Package AnyKernel3 (Image Only)
        run: |
          # --- Clone AnyKernel3 ---
          echo "Cloning AnyKernel3..."
          git clone https://github.com/cabagekiller/AnyKernel3.git -b gki-2.0 --depth=1 AnyKernel3
          rm -rf AnyKernel3/.git

          # --- Copy Kernel Image ---
          echo "Copying kernel Image..."
          cp kernel_workspace/kernel_platform/out/arch/arm64/boot/Image AnyKernel3/
          # Optional: cp kernel_workspace/kernel_platform/out/arch/arm64/boot/Image ./kernel_workspace/kernel

          # --- Skip Module Handling ---
          echo "Skipping kernel module copy and cleanup..."

          # --- Set up Zip Name ---
          ZIP_FILENAME="AnyKernel3-ImageOnly_${KSUVER}_${CONFIG_NAME:-default}_pineapple_${CURRENT_TIMESTAMP}.zip" # Adjusted name
          echo "ZIP_FILENAME=${ZIP_FILENAME}" >> $GITHUB_ENV
          echo "Final zip name will be: ${ZIP_FILENAME}"

          # --- Create the Zip File ---
          echo "Creating zip file: ${ZIP_FILENAME}..."
          cd AnyKernel3
          # Zip contents, excluding the base 'modules' directory just in case
          zip -r9 "../${ZIP_FILENAME}" * -x ".git*" -x "LICENSE" -x "README.md" -x "*.zip" -x modules
          cd ..
          echo "Zip file created."

          # --- Verify Zip Contents ---
          echo "Listing contents of ${ZIP_FILENAME}..."
          unzip -l "${ZIP_FILENAME}" | grep Image || echo "::warning::Could not verify Image in zip listing."

        env:
          KSUVER: ${{ env.KSUVER }}
          CURRENT_TIMESTAMP: ${{ env.CURRENT_TIMESTAMP }}
          # CONFIG_NAME: default # Example if needed
        working-directory: ${{ github.workspace }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Pass other variables needed ONLY for the 'name' or 'body' if not set via $GITHUB_ENV earlier
          # Example: ROOT_DIR_PREFIX: ${{ env.ROOT_DIR_PREFIX }}
        with:
          # Use the correct variable set by the previous step. Assumes file is in workspace root.
          files: ${{ env.ZIP_FILENAME }}
          # Ensure CURRENT_TIMESTAMP was set via $GITHUB_ENV in an earlier step
          tag_name: release-${{ env.CURRENT_TIMESTAMP }}
          # Use the correct ZIP_FILENAME in the release name too
          name: Release ${{ env.ROOT_DIR_PREFIX }} ${{ env.ZIP_FILENAME }} # Make sure ROOT_DIR_PREFIX is set earlier too
          body: |
            Release for ${{ env.ROOT_DIR_PREFIX }} based on branch ${{ github.event.inputs.CPU }}.
            KSU Version: ${{ env.KSUVER }} # Ensure KSUVER is set earlier
            Timestamp: ${{ env.CURRENT_TIMESTAMP }}
            Config: ${{ github.event.inputs.FEIL }} # Ensure FEIL is a valid input name
            Device: ${{ github.event.inputs.CPUD }}
          draft: false
          prerelease: false
